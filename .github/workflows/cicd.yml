# 
# <https://github.com/KFERMercer/OpenWrt-CI>
#
# Copyright (C) 2019 P3TERX
#
# Copyright (C) 2020 KFERMercer
#
name: OpenWrt-CI

on:
  push:
    branches:
      - main
  schedule:
    - cron: 0 0 * * *

permissions:
  contents: read

jobs:

  build_openwrt:

    name: Build OpenWrt Firmware

    runs-on: ubuntu-latest

    steps:
      - name: Space cleanup and Initialization environment
        env:
          DEBIAN_FRONTEND: noninteractive
        run: |
          docker rmi `docker images -q`
          sudo -E rm -rf /usr/share/dotnet /etc/mysql /etc/php /etc/apt/sources.list.d /usr/local/lib/android
          sudo -E apt-mark hold grub-efi-amd64-signed
          sudo -E apt update
          sudo -E apt -y purge azure-cli* docker* ghc* zulu* llvm* firefox google* dotnet* powershell* openjdk* mysql* php* mongodb* dotnet* snap*
          sudo -E apt -y full-upgrade
          sudo -E apt -y install ack antlr3 aria2 asciidoc autoconf automake autopoint binutils bison build-essential bzip2 ccache cmake cpio curl device-tree-compiler fastjar flex gawk gettext gcc-multilib g++-multilib git gperf haveged help2man intltool libc6-dev-i386 libelf-dev libglib2.0-dev libgmp3-dev libltdl-dev libmpc-dev libmpfr-dev libncurses5-dev libncursesw5-dev libreadline-dev libssl-dev libtool lrzsz mkisofs msmtp nano ninja-build p7zip p7zip-full patch pkgconf python3 python3-pip libpython3-dev qemu-utils rsync scons squashfs-tools subversion swig texinfo uglifyjs upx-ucl unzip vim wget xmlto xxd zlib1g-dev libpcre3
          sudo -E systemctl daemon-reload
          sudo -E apt -y autoremove --purge
          sudo -E apt clean
          sudo -E timedatectl set-timezone "Asia/Shanghai"

      - name: Checkout OpenWrt
        uses: actions/checkout@v3
        
      - name: Clone package
        run: |
          mkdir openwrt-packages
          cd openwrt-packages
          git clone https://github.com/jerrykuku/luci-theme-argon.git
          git clone https://github.com/linkease/istore.git
          git clone https://github.com/sirpdboy/luci-app-ddns-go.git
          git clone https://github.com/sirpdboy/luci-app-wizard.git
        
      - name: Update feeds
        run: |
          sed -i 's/#src-git helloworld/src-git helloworld/g' ./feeds.conf.default
          ./scripts/feeds update -a
          ./scripts/feeds install -a

      - name: Generate configuration file
        run: make defconfig

      - name: Configure Files
        run: |
          rm -f ./.config
          touch ./.config

          echo 'Config Target'
          cat >> .config << EOF
          CONFIG_TARGET_x86=y
          CONFIG_TARGET_x86_64=y
          CONFIG_TARGET_x86_64_Generic=y
          CONFIG_TARGET_ROOTFS_PARTSIZE=2048
          CONFIG_TARGET_IMAGES_GZIP=y
          EOF

          echo 'Config Images'
          cat >> .config << EOF
          CONFIG_EFI_IMAGES=y
          CONFIG_SQUASHFS_IMAGES=y
          CONFIG_ISO_IMAGES=y
          EOF

          echo 'Config GRUB'
          cat >> .config << EOF
          CONFIG_GRUB_IMAGES=y
          CONFIG_GRUB_EFI_IMAGES=y
          CONFIG_GRUB_CONSOLE=y
          CONFIG_GRUB_SERIAL="ttyS0"
          CONFIG_GRUB_BAUDRATE=115200
          CONFIG_GRUB_TIMEOUT="3"
          CONFIG_GRUB_TITLE="AkarinWrt"
          EOF

          echo 'Config Busybox'
          cat >> .config << EOF
          CONFIG_BUSYBOX_DEFAULT_HOSTNAME="AkarinWrt"
          CONFIG_BUSYBOX_DEFAULT_DNSDOMAINNAME=akarinwrt.local
          EOF

          echo 'Config Packages'
          echo 'Themes'
          cat >> .config << EOF
          CONFIG_PACKAGE_luci-theme-argon=y
          EOF
          echo 'Software'
          cat >> .config << EOF
          CONFIG_PACKAGE_luci=y
          CONFIG_PACKAGE_luci-app-wireguard=y
          CONFIG_PACKAGE_htop=y
          CONFIG_PACKAGE_busybox=y
          CONFIG_PACKAGE_luci-base=y
          EOF
          echo 'LuCI Language'
          cat >> .config << EOF
          CONFIG_PACKAGE_luci-i18n-base-zh-cn=y
          CONFIG_PACKAGE_luci-i18n-base-zh-tw=y
          CONFIG_PACKAGE_luci-i18n-base-ja=y
          CONFIG_PACKAGE_luci-i18n-base-kr=y
          CONFIG_PACKAGE_luci-i18n-base-fr=y
          CONFIG_PACKAGE_luci-i18n-base-de=y
          CONFIG_PACKAGE_luci-i18n-base-ru=y
          CONFIG_PACKAGE_luci-i18n-opkg-zh-cn=y
          CONFIG_PACKAGE_luci-i18n-opkg-zh-tw=y
          CONFIG_PACKAGE_luci-i18n-opkg-ja=y
          CONFIG_PACKAGE_luci-i18n-opkg-kr=y
          CONFIG_PACKAGE_luci-i18n-opkg-fr=y
          CONFIG_PACKAGE_luci-i18n-opkg-de=y
          CONFIG_PACKAGE_luci-i18n-opkg-ru=y
          CONFIG_PACKAGE_luci-i18n-firewall-zh-cn=y
          CONFIG_PACKAGE_luci-i18n-firewall-zh-tw=y
          CONFIG_PACKAGE_luci-i18n-firewall-ja=y
          CONFIG_PACKAGE_luci-i18n-firewall-kr=y
          CONFIG_PACKAGE_luci-i18n-firewall-fr=y
          CONFIG_PACKAGE_luci-i18n-firewall-de=y
          CONFIG_PACKAGE_luci-i18n-firewall-ru=y
          EOF
          echo 'Protoco'
          cat >> .config << EOF
          CONFIG_PACKAGE_luci-proto-ppp=*
          CONFIG_PACKAGE_luci-proto-ipv6=*
          CONFIG_PACKAGE_luci-proto-wireguard=*
          EOF
          echo 'Extra'
          cat >> .config << EOF
          CONFIG_PACKAGE_istore=*
          CONFIG_PACKAGE_luci-app-wizard=*
          CONFIG_PACKAGE_luci-app-ddns-go=y
          EOF
          
          echo 'Other Config'
          cat >> .config << EOF
          CONFIG_LINUX_5_15=y
          CONFIG_USES_SQUASHFS=y
          CONFIG_USES_TARGZ=y
          CONFIG_ARCH_64BIT=y
          CONFIG_VIRTIO_SUPPORT=y
          CONFIG_x86_64=y
          CONFIG_ARCH="x86_64"
          EOF


      - name: Download packages
        run: make download

      - name: Compile firmware
        run: |
          make -j$(nproc) || make -j1 V=s
          echo "======================="
          echo "Space usage:"
          echo "======================="
          df -h
          echo "======================="
          du -h --max-depth=1 ./ --exclude=build_dir --exclude=bin
          du -h --max-depth=1 ./build_dir
          du -h --max-depth=1 ./bin

      - name: Prepare artifact
        run: |
          mkdir -p ./artifact/package
          mkdir -p ./artifact/buildinfo
          rm -rf $(find ./bin/targets/ -type d -name "packages")
          cp -rf $(find ./bin/packages/ -type f -name "*.ipk") ./artifact/package/
          cp -rf $(find ./bin/targets/ -type f -name "*.buildinfo" -o -name "*.manifest") ./artifact/buildinfo/

      - name: Upload buildinfo
        uses: actions/upload-artifact@v3
        with:
          name: OpenWrt_buildinfo
          path: ./artifact/buildinfo/

      - name: Upload package
        uses: actions/upload-artifact@v3
        with:
          name: OpenWrt_package
          path: ./artifact/package/

      - name: Upload firmware
        uses: actions/upload-artifact@v3
        with:
          name: OpenWrt_firmware
          path: ./bin/targets/
